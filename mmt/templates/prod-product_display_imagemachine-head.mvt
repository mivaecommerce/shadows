const debounce = (callback, wait) => {
	let timeoutId = null;

	return (...args) => {
		window.clearTimeout(timeoutId);
		timeoutId = window.setTimeout(() => {
			callback.apply(null, args);
		}, wait);
	};
};
const photoGallery = document.querySelector('[data-PhotoGallery]');
const productName = '&mvtj:product:name;';
let generate_thumbnail_event = new CustomEvent('ImageMachine_Generate_Thumbnail');
let images = [];
let imageSizing = function imageSizing() {
	const image = photoGallery.querySelector('img');

	if (image.complete && image.height !== 0) {
		photoGallery.style.setProperty('--prod-img-x', ` ${image.width}px`);
		photoGallery.style.setProperty('--prod-img-y', ` ${image.height}px`);
	}
	else {
		image.addEventListener('load', () => {
			photoGallery.style.setProperty('--prod-img-x', ` ${image.width}px`);
			photoGallery.style.setProperty('--prod-img-y', ` ${image.height}px`);
		});
	}
};
let thumbnailIndex = 0;
let zoomImageLink = document.querySelector('[data-photograph]');

ImageMachine.prototype.oninitialize = function (data) {
	images = [];
	thumbnailIndex = 0;
	zoomImageLink.href = (data.length > 0) ? data[0].image_data[this.closeup_index] : 'graphics/en-US/admin/blank.gif';
	this.Initialize(data);
	debounce(imageSizing, 250);
	MovingPictures();
};

ImageMachine.prototype.ImageMachine_Generate_Thumbnail = function (thumbnail_image, main_image, closeup_image, type_code) {
	let thumbnailImg;
	let thumbnailItem;
	let thumbnailLink;
	let thumbnailPicture;

	thumbnailItem = document.createElement('li');
	thumbnailItem.classList.add('x-filmstrip__list-item');

	if (typeof( thumbnail_image ) === 'string' && thumbnail_image.length > 0) {
		thumbnailLink = document.createElement('a');
		thumbnailLink.href = closeup_image;
		thumbnailLink.classList.add('x-filmstrip__link');
		thumbnailLink.setAttribute('aria-label', ` Product Image ${Number(thumbnailIndex + 1)} of ${Number(this.data.length)}`);
		thumbnailLink.setAttribute('data-hook', 'a11yThumbnailLink');
		thumbnailLink.setAttribute('data-title', productName);
		thumbnailLink.setAttribute('role', 'button');
		thumbnailLink.setAttribute('target', '_blank');

		thumbnailPicture = document.createElement('picture');
		thumbnailPicture.classList.add('x-filmstrip__picture');

		thumbnailImg = document.createElement('img');
		thumbnailImg.classList.add('x-filmstrip__image');
		thumbnailImg.setAttribute('alt', productName);
		thumbnailImg.setAttribute('data-zoom', closeup_image);
		thumbnailImg.setAttribute('decoding', 'async');
		thumbnailImg.setAttribute('loading', 'lazy');
		thumbnailImg.setAttribute('width', this.thumb_width);
		thumbnailImg.setAttribute('height', this.thumb_height);
		thumbnailImg.src = thumbnail_image;

		thumbnailPicture.appendChild(thumbnailImg);
		thumbnailLink.appendChild(thumbnailPicture);
		thumbnailItem.appendChild(thumbnailLink);

		let image = {
			imageIndex: thumbnailIndex,
			imageSrc: closeup_image,
			imageTitle: productName
		};
		images.push(image);

		thumbnailIndex++
	}
	else {
		let image = {
			imageIndex: thumbnailIndex,
			imageSrc: closeup_image,
			imageTitle: productName
		};
		images.push(image);

	}

	document.dispatchEvent(generate_thumbnail_event);

	return thumbnailItem;
};

ImageMachine.prototype.onthumbnailimageclick = function (data) {
	event.preventDefault();
	this.Thumbnail_Click(data);

	if (event.target.hasAttribute('data-zoom')) {
		zoomImageLink.href = event.target.getAttribute('data-zoom');
	}
	else if (event.target.parentElement.hasAttribute('href')) {
		zoomImageLink.href = event.target.parentElement.href;
	}
	else {
		zoomImageLink.href = event.target.href;
	}
};


/**
 * Filmstrip
 * Version 1.0
 *
 * Pure JavaScript thumbnail filmstrip with accessibility baked in.
 */
let MovingPictures = function MovingPictures() {
	let filmstripWrapper = document.querySelector('[data-filmstrip-wrapper]');
	let filmstrip;
	let filmstripList;
	let isVertical;

	if (filmstripWrapper) {
		filmstrip = filmstripWrapper.querySelector('[data-filmstrip]');
		if (window.innerWidth >= 960) {
			filmstripWrapper.setAttribute('data-vertical', '');
		}
		else {
			filmstripWrapper.removeAttribute('data-vertical');
		}
		filmstripList = filmstrip.querySelector('ul');
		isVertical = filmstripWrapper.hasAttribute('data-vertical');
	}

	let navigateToNextItem = function navigateToNextItem(direction) {
		let scrollAmount = isVertical ? filmstrip.clientHeight : filmstrip.clientWidth;

		scrollAmount = direction === 'previous' ? -scrollAmount : scrollAmount;
		if (isVertical) {
			filmstrip.scrollBy({top: scrollAmount});
		}
		else {
			filmstrip.scrollBy({left: scrollAmount});
		}
	};

	/**
	 * Build the controls and add them to the gallery wrapper.
	 */
	let buildControls = function buildControls(wreckIt) {
		let findControls = document.querySelector('[data-filmstrip-controls]');

		if (wreckIt === true) {
			if (findControls !== null) {
				filmstripWrapper.removeAttribute('style');
				filmstripList.classList.remove('has-controls');
				findControls.remove();
			}
			return;
		}

		if (findControls === null) {
			let controls = document.createElement('ul');
			let controlTemplate = [
				'<li><button class="c-button c-button--secondary x-filmstrip-controls__previous" aria-label="Previous" data-dir="previous" type="button"><span class="u-icon-chevron-left" aria-hidden="true"></span></button></li>',
				'<li><button class="c-button c-button--secondary x-filmstrip-controls__next" aria-label="Next" data-dir="next" type="button"><span class="u-icon-chevron-right" aria-hidden="true"></span></button></li>'
			].join('');

			controls.classList.add('x-filmstrip-controls');
			controls.setAttribute('data-filmstrip-controls', '');
			controls.innerHTML = controlTemplate;

			filmstripWrapper.prepend(controls);
			filmstripList.classList.add('has-controls');

			if (window.innerWidth >= 960) {
				filmstripWrapper.style.padding = `${controls.querySelector('button').offsetHeight}px 0`;
			}
			else {
				filmstripWrapper.style.padding = `0 ${controls.querySelector('button').offsetWidth}px`;
			}

			controls.addEventListener('click', ({target}) => {
				navigateToNextItem(target.dataset.dir);
			});

			/**
			 * Bind the arrow keys to scroll through the images and fire the same functions as the buttons.
			 */
			filmstrip.addEventListener('keypress', ({key}) => {
				if (key === 'ArrowRight') {
					navigateToNextItem('next');
				}
				if (key === 'ArrowLeft') {
					navigateToNextItem('previous');
				}
			});
		}
	};

	let observeResize = debounce(() => {
		if (window.innerWidth >= 960) {
			filmstripWrapper.setAttribute('data-vertical', '');
		}
		else {
			filmstripWrapper.removeAttribute('data-vertical');
		}

		imageSizing();

		if ((filmstrip.querySelector('ul').clientWidth > filmstrip.clientWidth) || (isVertical && filmstrip.querySelector('ul').clientHeight > filmstripWrapper.clientHeight)) {
			let findControls = document.querySelector('[data-filmstrip-controls]');

			if (findControls !== null) {
				filmstripWrapper.removeAttribute('style');
				filmstripList.classList.remove('has-controls');
				findControls.remove();
			}
			buildControls();
		}
		else {
			buildControls(true);
		}
	}, 250);

	document.addEventListener('ImageMachine_Thumbnails_Initialized', event => {
	});

	if ((filmstrip.querySelector('ul').clientWidth > filmstrip.clientWidth) || (isVertical && filmstrip.querySelector('ul').clientHeight > filmstripWrapper.clientHeight)) {
		buildControls();
	}
	else {
		buildControls(true);
	}

	window.addEventListener('resize', observeResize);
};


/**
 * Picture Book
 * Version 1.0
 *
 * Pure JavaScript photo gallery with accessibility baked in.
 *
 * Inspired by the PhotoViewerJS code by Curtis Campbell:
 * https://github.com/curtisc123/PhotoViewerJS
 */
(document => {
	/**
	 * Public Properties
	 * @type {{init}}
	 */
	let PictureBook = {};
	let defaults = {
		AnimationTime: 150
	};

	/**
	 * Private Members
	 * @type {string}
	 */
	const PHOTO_VIEWER_ACTIVE = 'has-photo-viewer';
	const PHOTO_VIEWER_VISIBLE = 'x-photo-viewer__visible';
	const PHOTO_VIEWER_LOADED_CLASS = 'is-loaded';
	const PhotoGallery = document.querySelector('[data-PhotoGallery]');
	let currentLoadedImage;
	let Photographs;
	let PhotographSources;
	let PhotoViewer;
	let PhotoViewerTitle;
	let PhotoViewerClose;
	let PhotoViewerCurrentImageContainer;
	let PhotoViewerCurrentImage;
	let PhotoViewerControls;
	let PhotoViewerPreviousImage;
	let PhotoViewerNextImage;
	let PhotoViewerCount;
	let openTrigger;

	/**
	 * Public Methods
	 */
    PictureBook.init = () => {
		BuildPhotoViewer();
		Setup();
		SetImageLinkListeners();

		PhotoViewerClose.addEventListener('click', ClosePhotoViewer);
		PhotoViewerNextImage.addEventListener('click', LoadNextImage);
		PhotoViewerPreviousImage.addEventListener('click', LoadPreviousImage);
		window.addEventListener('keydown', event => {
			let escKey = (event.key === 'Escape' || event.keyCode === 27);

			if (event.defaultPrevented) {
				return; // Do nothing if the event was already processed
			}

			if (!escKey) {
				return;
			}

			if (escKey) {
				if (PhotoViewer.classList.contains('x-photo-viewer__visible')) {
					ClosePhotoViewer(event);
				}
			}
		}, true);
		swipe.init(PhotoViewerCurrentImageContainer);
	};

	/**
	 * Private Methods
	 * @constructor
	 */
    let Setup = () => {
		Photographs = document.querySelectorAll('[data-photograph]');
		PhotographSources = document.querySelectorAll('[data-zoom]');
		PhotoViewer = document.querySelector('[data-PhotoViewer]');
		PhotoViewerTitle = document.querySelector('[data-PhotoViewerTitle]');
		PhotoViewerClose = document.querySelector('[data-PhotoViewerClose]');
		PhotoViewerCurrentImageContainer = document.querySelector('[data-PhotoViewerCurrentImageContainer]');
		PhotoViewerCurrentImage = document.querySelector('[data-PhotoViewerCurrentImage]');
		PhotoViewerControls = document.querySelector('[data-PhotoViewerControls]');
		PhotoViewerPreviousImage = document.querySelector('[data-PhotoViewerPreviousImage]');
		PhotoViewerNextImage = document.querySelector('[data-PhotoViewerNextImage]');
		PhotoViewerCount = document.querySelector('[data-PhotoViewerCount]');
	};

    let BuildPhotoViewer = () => {
		let PhotoViewerElement = document.createElement('div');

		PhotoViewerElement.classList.add('x-photo-viewer');
		PhotoViewerElement.setAttribute('data-PhotoViewer', '');
		PhotoViewerElement.setAttribute('aria-hidden', 'true');
		PhotoViewerElement.setAttribute('aria-label', `Gallery of ${productName} Images`);
		PhotoViewerElement.setAttribute('role', 'dialog');
		PhotoViewerElement.innerHTML = [
			'<header class="x-photo-viewer__header">',
			'<p class="x-photo-viewer__title" data-PhotoViewerTitle aria-live="polite" aria-atomic="true"></p>',
			'<div class="x-photo-viewer__close" data-PhotoViewerClose><button class="c-button c-button-dark" disabled>X<span class="u-hide-visually">Close dialog</span></button></div>',
			'</header>',
			'<div class="x-photo-viewer__container">',
			'<picture class="x-photo-viewer__current-image" data-PhotoViewerCurrentImageContainer>',
			'<img data-PhotoViewerCurrentImage src="" alt="" loading="lazy">',
			'</picture>',
			'</div>',
			'<div class="x-photo-viewer__controls" data-PhotoViewerControls>',
			'<div class="x-photo-viewer__previous-image" data-PhotoViewerPreviousImage><button class="c-button c-button-dark c-button--small" aria-label="Previous" disabled>&laquo; Previous</button></div>',
			'<div class="x-photo-viewer__count" data-PhotoViewerCount aria-live="polite" aria-atomic="true"></div>',
			'<div class="x-photo-viewer__next-image" data-PhotoViewerNextImage><button class="c-button c-button-dark c-button--small" aria-label="Next" disabled>Next &raquo;</button></div>',
			'</div>'
		].join('');

		document.body.append(PhotoViewerElement);
	};

    let SetImageLinkListeners = () => {
		for (let i = 0; i < Photographs.length; i++) {
			Photographs[i].addEventListener('click', ImageOpen);
		}
	};

	let ImageOpen = function (e) {
		e.preventDefault();
		InitializePhotoViewer(this.href);
	};

    let InitializePhotoViewer = clickedImage => {
		if (images.length === 1) {
			PhotoViewerControls.classList.add('u-invisible');
		}
		for (let i = 0; i < images.length; i++) {
			if (images[i].hasOwnProperty('imageSrc')) {
				if (clickedImage.includes(images[i].imageSrc)) {
					OpenPhotoViewer(images[i]);
				}
			}
		}
	};

    let SetPhotoViewerPhoto = ({imageTitle, imageSrc, imageIndex}) => {
		PhotoViewerCurrentImage.alt = imageTitle;
		PhotoViewerCurrentImage.src = imageSrc;
		PhotoViewerTitle.innerHTML = imageTitle;
		PhotoViewerCount.innerHTML = `Image ${imageIndex + 1} of ${images.length}`;
		currentLoadedImage = imageIndex;
		setTimeout(() => {
			PhotoViewerCurrentImageContainer.classList.add(PHOTO_VIEWER_LOADED_CLASS);
		}, defaults.AnimationTime);
	};

    let OpenPhotoViewer = clickedImage => {
		document.documentElement.classList.add(PHOTO_VIEWER_ACTIVE);
		PhotoViewer.classList.add(PHOTO_VIEWER_VISIBLE);
		PhotoViewer.setAttribute('aria-hidden', 'false');
		Array.from(PhotoViewer.querySelectorAll('button')).forEach(button => {
			button.removeAttribute('disabled');
		});
		SetPhotoViewerPhoto(clickedImage);
		a11yHelper();
	};

    let ClosePhotoViewer = e => {
		e.preventDefault();
		PhotoViewer.setAttribute('aria-hidden', 'true');
		Array.from(PhotoViewer.querySelectorAll('button')).forEach(button => {
			button.setAttribute('disabled', '');
		});
		PhotoViewer.classList.remove(PHOTO_VIEWER_VISIBLE);
		document.documentElement.classList.remove(PHOTO_VIEWER_ACTIVE);
		a11yHelper();
		PhotoViewerControls.classList.remove('u-invisible');
	};

    let LoadNextImage = e => {
		e.preventDefault();
		if (currentLoadedImage >= images.length - 1) {
			return;
		}
		PhotoViewerCurrentImageContainer.classList.remove(PHOTO_VIEWER_LOADED_CLASS);
		SetPhotoViewerPhoto(images[currentLoadedImage + 1]);
	};

    let LoadPreviousImage = e => {
		e.preventDefault();
		if (currentLoadedImage <= 0) {
			return;
		}
		PhotoViewerCurrentImageContainer.classList.remove(PHOTO_VIEWER_LOADED_CLASS);
		SetPhotoViewerPhoto(images[currentLoadedImage - 1]);
	};

	let swipe = {
		touchStartX: 0,
		touchEndX: 0,
		minSwipePixels: 100,
		detectionZone: undefined,
		init(detectionZone) {
			detectionZone.addEventListener('touchstart', ({changedTouches}) => {
				swipe.touchStartX = changedTouches[0].screenX;
			}, false);
			detectionZone.addEventListener('touchend', event => {
				swipe.touchEndX = event.changedTouches[0].screenX;
				swipe.handleSwipeGesture(event);
			}, false);
		},

		handleSwipeGesture(event) {
			let direction;
			let moved;

			if (swipe.touchEndX <= swipe.touchStartX) {
				moved = swipe.touchStartX - swipe.touchEndX;
				direction = 'left'
			}
			if (swipe.touchEndX >= swipe.touchStartX) {
				moved = swipe.touchEndX - swipe.touchStartX;
				direction = 'right'
			}
			if (moved > swipe.minSwipePixels && direction !== 'undefined') {
				swipe.scroll(direction, event)
			}
		},

		scroll(direction, event) {
			if (direction === 'left') {
				LoadNextImage(event);
			}
			if (direction === 'right') {
				LoadPreviousImage(event);
			}
		}
	};

    let a11yHelper = () => {
		let focusableElements = PhotoViewer.querySelectorAll('a[href], button:not([disabled]):not([aria-hidden])');
		let firstFocus = focusableElements[0];
		let lastFocus = focusableElements[focusableElements.length - 1];

		function handleKeyboard(keyEvent) {
			let tabKey = (keyEvent.key === 'Tab' || keyEvent.keyCode === 9);

			function handleBackwardTab() {
				if (document.activeElement === firstFocus) {
					keyEvent.preventDefault();
					lastFocus.focus();
				}
			}

			function handleForwardTab() {
				if (document.activeElement === lastFocus) {
					keyEvent.preventDefault();
					firstFocus.focus();
				}
			}

			if (!tabKey) {
				return;
			}

			if (keyEvent.shiftKey) {
				handleBackwardTab();
			}
			else {
				handleForwardTab();
			}
		}

		/**
		 * Toggles an 'inert' attribute on all direct children of the <body> that are not the element you passed in. The
		 * element you pass in needs to be a direct child of the <body>.
		 *
		 * Most useful when displaying a dialog/modal/overlay and you need to prevent screen-reader users from escaping the
		 * modal to content that is hidden behind the modal.
		 *
		 * This is a basic version of the `inert` concept from WICG. It is based on an alternate idea which is presented here:
		 * https://github.com/WICG/inert/blob/master/explainer.md#wouldnt-this-be-better-as
		 * Also see https://github.com/WICG/inert for more information about the inert attribute.
		 */
		let setInert = () => {
			Array.from(document.body.children).forEach(child => {
				if (child !== PhotoViewer && child.tagName !== 'LINK' && child.tagName !== 'SCRIPT') {
					child.classList.add('is-inert');
					child.setAttribute('inert', '');
					child.setAttribute('aria-hidden', 'true');
				}
			});
		};

		let removeInert = () => {
			Array.from(document.body.children).forEach(child => {
				if (child !== PhotoViewer && child.tagName !== 'LINK' && child.tagName !== 'SCRIPT') {
					child.classList.remove('is-inert');
					child.removeAttribute('inert');
					child.removeAttribute('aria-hidden');
				}
			});
		};

		if (PhotoViewer.classList.contains('x-photo-viewer__visible')) {
			openTrigger = document.activeElement;
			setInert();
			firstFocus.focus();
			PhotoViewer.addEventListener('keydown', keyEvent => {
				handleKeyboard(keyEvent);
			});
		}
		else {
			removeInert();
			openTrigger.focus();
			PhotoViewer.removeEventListener('keydown', handleKeyboard);
		}
	};

	return PictureBook.init();
})(document);